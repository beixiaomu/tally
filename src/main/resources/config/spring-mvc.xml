<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.bei.tally.controller" />
	<mvc:annotation-driven />
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<!-- <property name="prefix" value="/WEB-INF/jsp/" /> -->
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- 对静态资源放行 -->
	<!-- 对静态资源的访问 -->
	<mvc:resources mapping="/static/**" location="/static/" />
	<!-- //加载静态资源 -->
	<mvc:default-servlet-handler />

	<!-- 配置拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 拦截所有mvc控制器 -->
			<mvc:mapping path="/**" />
			<!-- mvc:exclude-mapping是另外一种拦截，它可以在你后来的测试中对某个页面进行不拦截，这样就不用在 LoginInterceptor的preHandler方法里面获取不拦截的请求uri地址了(优选) -->
			<!-- 1.这是第一种；不拦截静态资源的方法 -->
			<!-- <mvc:exclude-mapping path="/**/fonts/*" />
			<mvc:exclude-mapping path="/**/*.css" />
			<mvc:exclude-mapping path="/**/*.js" />
			<mvc:exclude-mapping path="/**/*.png" />
			<mvc:exclude-mapping path="/**/*.gif" />
			<mvc:exclude-mapping path="/**/*.jpg" />
			<mvc:exclude-mapping path="/**/*.jpeg" />
			<mvc:exclude-mapping path="/**/*login*" />
			<mvc:exclude-mapping path="/**/*Login*" /> -->
			<!-- 2.这是第二种；不拦截静态资源的方法 -->
			<!-- 在spring-mvc.xml中启用默认Servlet
				<mvc:default-servlet-handler/>
				在web.xml中增加对静态资源的处理
				<servlet-mapping>    
		     	<servlet-name>default</servlet-name>    
		     	<url-pattern>*.js</url-pattern>    
		     	<url-pattern>*.css</url-pattern>    
		     	<url-pattern>/assets/*"</url-pattern>    
		     	<url-pattern>/images/*</url-pattern>    
		 		</servlet-mapping>  -->
			<!-- 3.这是第三种；不拦截静态资源的方法 -->
			<!-- .do -->
			<mvc:exclude-mapping path="/index/*" />
			<mvc:exclude-mapping path="/produce/*" />
			<bean class="com.bei.tally.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 全局异常处理器只要类实现了HandlerExceptionResolver接口，就是一个全局异常处理器哦-->
    <bean class="com.bei.tally.exception.CustomExceptionResolver"/>

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>
</beans>